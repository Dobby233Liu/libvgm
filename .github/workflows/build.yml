name: Build & Test

on:
  push:
    # branches: [ master ]
  pull_request:
    # branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        config:
          - { os: windows-latest, shell: bash, compiler: msvc, build_type: Release, extra_settings: "-A Win32" }
          - { os: windows-latest, shell: bash, compiler: msvc, build_type: Debug, extra_settings: "-A Win32" }
          #- { os: windows-latest, shell: bash, compiler: msvc, build_type: Release, extra_settings: "-A x64" }
          #- { os: windows-latest, shell: bash, compiler: msvc, build_type: Debug, extra_settings: "-A x64" }
          - { os: windows-latest, shell: "msys2 {0}", compiler: mingw, build_type: Release, extra_settings: "-G 'MSYS Makefiles'" }
          - { os: windows-latest, shell: "msys2 {0}", compiler: mingw, build_type: Debug, extra_settings: "-G 'MSYS Makefiles'" }
          - { os: macos-latest, shell: bash, build_type: Release }
          - { os: macos-latest, shell: bash, build_type: Debug }
          - { os: ubuntu-latest, shell: bash, build_type: Release }
          - { os: ubuntu-latest, shell: bash, build_type: Debug }
      fail-fast: false

    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    env:
      CI_BUILD_TYPE: ${{ matrix.config.build_type }}
      CI_EXTRA_SETTINGS: ${{ matrix.config.extra_settings }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Prepare enviornment [Windows MinGW]
      if: runner.os == 'Windows' && matrix.config.compiler == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        # update: true
        install: |
          make mingw-w64-x86_64-cmake
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-zlib mingw-w64-x86_64-libiconv

    # avoid linker errors by enforcing WinAPI (instead of libiconv)
    # and zdll.lib (DLL instead of static)
    # The libraries that are shipped with libvgm were built with VC6 and VC2010
    # and don't work with VS2015 and higher.
    - name: Fix dependencies [MSVC]
      if: matrix.config.compiler == 'msvc'
      run: |
        echo "CMAKE_OPTS=-DUTIL_CHARCNV_ICONV=OFF -DUTIL_CHARCNV_WINAPI=ON " \
        "-DZLIB_LIBRARY_DEBUG=${GITHUB_WORKSPACE}/libs/lib/zdll.lib " \
        "-DZLIB_LIBRARY_RELEASE=${GITHUB_WORKSPACE}/libs/lib/zdll.lib" >> $GITHUB_ENV

    - name: Install dependencies [macOS]
      if: runner.os == 'macOS'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew update
        brew install libao

    - name: Install dependencies [Linux]
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install \
          libasound2-dev \
          libpulse-dev \
          libao-dev \
          zlib1g-dev \

    - name: Configuring
      run: |
        cmake ${CI_EXTRA_SETTINGS} \
          -B build \
          -DCMAKE_INSTALL_PREFIX=install \
          -DCMAKE_BUILD_TYPE=${CI_BUILD_TYPE} \
          ${CMAKE_OPTS} \
          -DBUILD_TESTS=ON \

    - name: Build
      run: |
        cmake \
          --build build \
          --config ${CI_BUILD_TYPE} \
          --parallel 2 \

    - name: Install
      run: |
        cmake \
          --install build \
          --config ${CI_BUILD_TYPE}

    - name: Check
      run: |
        echo "Installed files"
        echo "========================="
        find install
        echo ""
        
        function file_lib() {
          echo "$(basename "$1")"
          file "$1"
          echo ""
        }
        export -f file_lib
        
        echo "Compiled libraries"
        echo "==========================="
        find install \
          -name 'libvgm-*' \
          -exec bash -c "file_lib \"{}\"" \;
        
        function print_pc() {
          echo "$(basename "$1")"
          cat "$1"
          echo ""
        }
        export -f print_pc
        
        echo "pkg-config package files"
        echo "================================"
        find install/lib/pkgconfig \
          -name '*.pc' \
          -exec bash -c "print_pc \"{}\"" \;
